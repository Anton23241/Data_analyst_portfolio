#!/usr/bin/env python
# coding: utf-8

# # Описание проекта

# **Рынок заведений общественного питания Москвы**
# 
# Инвесторы из фонда «Shut Up and Take My Money» решили попробовать себя в новой области и открыть заведение общественного питания в Москве. Заказчики ещё не знают, что это будет за место: кафе, ресторан, пиццерия, паб или бар, — и какими будут расположение, меню и цены.
# 
# Подготовим исследование рынка Москвы, найдем интересные особенности и презентуем полученные результаты, которые в будущем помогут в выборе подходящего инвесторам места.

# # Описание данных

# Файл moscow_places.csv:
# 
# - name — название заведения;
# - address — адрес заведения;
# - category — категория заведения, например «кафе», «пиццерия» или «кофейня»;
# - hours — информация о днях и часах работы;
# - lat — широта географической точки, в которой находится заведение;
# - lng — долгота географической точки, в которой находится заведение;
# - rating — рейтинг заведения по оценкам пользователей в Яндекс Картах (высшая оценка — 5.0);
# - price — категория цен в заведении, например «средние», «ниже среднего», «выше среднего» и так далее;
# - avg_bill — строка, которая хранит среднюю стоимость заказа в виде диапазона, например:
#   - «Средний счёт: 1000–1500 ₽»;
#   - «Цена чашки капучино: 130–220 ₽»;
#   - «Цена бокала пива: 400–600 ₽».
#      и так далее;
# - middle_avg_bill — число с оценкой среднего чека, которое указано только для значений из столбца avg_bill, начинающихся с подстроки «Средний счёт»:
#   - Если в строке указан ценовой диапазон из двух значений, в столбец войдёт медиана этих двух значений.
#   - Если в строке указано одно число — цена без диапазона, то в столбец войдёт это число.
#   - Если значения нет или оно не начинается с подстроки «Средний счёт», то в столбец ничего не войдёт.
# - middle_coffee_cup — число с оценкой одной чашки капучино, которое указано только для значений из столбца avg_bill, начинающихся с подстроки «Цена одной чашки капучино»:
#   - Если в строке указан ценовой диапазон из двух значений, в столбец войдёт медиана этих двух значений.
#   - Если в строке указано одно число — цена без диапазона, то в столбец войдёт это число.
#   - Если значения нет или оно не начинается с подстроки «Цена одной чашки капучино», то в столбец ничего не войдёт.
# - chain — число, выраженное 0 или 1, которое показывает, является ли заведение сетевым (для маленьких сетей могут встречаться ошибки):
#   - 0 — заведение не является сетевым
#   - 1 — заведение является сетевым
# - district — административный район, в котором находится заведение, например Центральный административный округ;
# - seats — количество посадочных мест.

# # Содержание
# 
# 1. Загрузка данных
# 2. Предобработка данных
# 3. Аналих данных
# 4. Детализация исследования: открытие кофейни

# ## Загрузка данных

# Импортируем библиотеки, которые понадобятся для выполнения проекта

# In[1]:


import pandas as pd 
import numpy as np
import datetime as dt
import seaborn as sns
pd.set_option('display.max_columns', 0)
import matplotlib.pyplot as plt
import plotly.express as px
import plotly.graph_objects as go
import warnings
warnings.filterwarnings("ignore")
from folium import Map, Choropleth, Marker
from folium.plugins import MarkerCluster


# In[2]:


import plotly.io as pio
pio.renderers.default = "svg"
svg_renderer = pio.renderers["svg"]
svg_renderer.scale = 1.2


# Загружаем данные

# In[3]:


df = pd.read_csv('/datasets/moscow_places.csv')
df.head()


# Посмотрим общую информацию по таблице

# In[4]:


df.info()


# In[5]:


df['seats'].describe()


# 1288 - очень большое значение, даже для Москвы. Проанализируем данные на этапе предобработки данных.

# In[6]:


print('Количество заведений:', df['name'].nunique())


# In[7]:


df['category'].value_counts()


# **Вывод:**
# 
# В таблице 8406 строк, 5614 заведений, тип данных соответствует значениям, изменение названий столбцов не требуется. Можно приступать к этапу предобработки данных.

# ## Предобработка данных 

# Проверим таблицу на наличие дубликатов

# In[8]:


print('Кол-во дубликатов', df.duplicated().sum())


# Проверим таблицу на наличие пропусков

# In[9]:


df.isna().sum()


# По полученным результатам, можно сделать вывод, что пропуски вызваны из-за разных категорий заведений (заполнять средними или медианными значениями по названию заведения остальные столбцы некорректно, так как количество мест в сетевых заведениях, в разных районах, может значительно отличаться). Заменить корректно пропуски нельзя, будут искажения в исследовании.

# Вернемся к количеству сидячих мест, так как меня значение 1288 вызывает сомнения. Построим boxplot и посмотрим на выбросы.

# In[10]:


sns.set_palette('rocket')
plt.figure(figsize=(20,15))
sns.boxplot(y='seats', x='category', data=df, hue="category", dodge=False)
plt.title('Количество сидячих мест в заведениях')
plt.xlabel('Тип заведения')
plt.ylabel('Количество сидячих мест')
plt.show()


# На графике видим выбросы. Скорее всего они связаны с ошибкой при заполнении данных. Оставим все, что меньше 600, посчитаем сколько таких заведений.

# In[11]:


print('Количество заведений с числом мест больше 600:', df[df['seats'] > 600]['name'].count())


# Таких заведений меньше 1%, удалим их.

# In[12]:


df600 = df[df['seats'] > 600]
df = df.query('index not in @df600.index')
print('Заведений с числом мест больше 600:', df[df['seats'] > 600]['name'].count())


# Создадим столбец street с названиями улиц из столбца с адресом.

# In[13]:


df['street'] = df['address'].str.split(', ').str[1]
df.head()


# Создадим столбец is_24/7 с обозначением, что заведение работает ежедневно и круглосуточно (24/7):
# - логическое значение True — если заведение работает ежедневно и круглосуточно;
# - логическое значение False — в противоположном случае.

# In[14]:


df['is_24/7'] = df['hours'].str.contains('ежедневно, круглосуточно')
df.head()


# In[15]:


# приводим столбец к нижнему регистру
df['name'] = df['name'].str.lower()
df['address'] = df['address'].str.lower()


# In[16]:


df.duplicated(subset=['name', 'address']).sum()
print(len(df))
df = df.drop_duplicates(subset=['name', 'address'])
print(len(df))


# ## Анализ данных

# ### Категории заведений

# Посмотрим какие категории заведений представлены в данных. Исследуем количество объектов общественного питания по категориям: рестораны, кофейни, пиццерии, бары и так далее. Построим визуализации.

# In[17]:


category_name = df.groupby('category')['name'].count().reset_index()
category_name.columns = ['category', 'count']
category_name


# In[18]:


fig = px.bar(category_name, 
             x='category', 
             y='count', 
             text='count',
             title='Количество объектов общественного питания по видам'
            )
fig.update_layout(xaxis_title='Категории заведений',
                  yaxis_title='Количество заведений',
                  xaxis={'categoryorder':'total ascending'})
fig.show()


# **Вывод:**
# 
# По количеству заведений лидируют кафе с численностью 2364, немного меньше ресторан - 2030. На последнем месте булочная - 255.
# 
# 

# ### Исследование количества посадочных мест в местах по категориям

# Исследуем количество посадочных мест в местах по категориям: рестораны, кофейни, пиццерии, бары и так далее. Построим визуализации.

# In[19]:


df.groupby('category')['seats'].describe().round(2)


# In[20]:


mean_seats = df[df['seats'] != 0].groupby('category')['seats'].mean().reset_index().sort_values(by='seats', ascending=False).round(2)

f, ax = plt.subplots(figsize=(17, 7))

ax = sns.barplot(data=mean_seats, x='category', y='seats')

ax.set_xlabel('Тип объекта')
ax.set_ylabel('Количество мест')
ax.set_title('Среднее количество мест в заведениях Москвы')
plt.xticks(rotation=45)
plt.show()


# In[21]:


median_seats = df[df['seats'] != 0].groupby('category')['seats'].median().reset_index().sort_values(by='seats', ascending=False).round(2)

f, ax = plt.subplots(figsize=(17, 7))

ax = sns.barplot(data=median_seats, x='category', y='seats')

ax.set_xlabel('Тип объекта')
ax.set_ylabel('Количество мест')
ax.set_title('Медианное количество мест в заведениях Москвы')
plt.xticks(rotation=45)
plt.show()


# In[22]:


plt.figure(figsize=(17, 7))
ax = sns.boxplot(data=df, x='seats', y='category', palette="Set3")
plt.title('Ящик с усами распределения количества посадочных мест по типам заведений')
plt.xlabel('Количество мест')
plt.ylabel('Тип заведений')
plt.show()


# **Вывод:** 
# 
# Больше всего посадочных мест в ресторанах, что логично, так как большинство празников люди отмечают в ресторанах. Далее идут заведения быстрого питания, т.к. они больше всего распространены в Москве. Кафе и столовые располагают для своих гостей меньшим количеством мест.

# ### Cоотношение сетевых и несетевых заведений в датасете

# Подсчитаем число сетевых и несетевых заведений.

# In[23]:


chain = df['chain'].value_counts().reset_index()
chain.columns = ['chain', 'count']
chain


# In[24]:


fig = go.Figure(data=[go.Pie(labels=['несетевые', 'сетевые'], values=chain['count'])], layout=go.Layout(
        title=go.layout.Title(text="Соотношение сетевых и несетевых заведений")))
fig.show()


# По графику, мы можем сказать, что в Москве почти 62% заведений не являются сетевыми.

# **Посмотрим какие категории заведений чаще являются сетевыми**
# 

# In[25]:


chain_objects = df.groupby(['category', 'chain'])['name'].count().reset_index()
chain_objects.columns = ['category', 'chain', 'count']
chain_objects['chain'] = chain_objects['chain'].astype(object)
chain_objects = chain_objects.sort_values(['count', 'chain'])
chain_objects


# In[26]:


fig = px.bar(chain_objects, # загружаем данные и заново их сортируем
             x='count', # указываем столбец с данными для оси X
             y='category', # указываем столбец с данными для оси Y
             text='count', # добавляем аргумент, который отобразит текст с информацией                
             color='chain',
             category_orders={"chain": ["сетевой", "несетевой"]}
            )
# оформляем график
fig.update_layout(title='Соотношение сетевых заведений',
                   xaxis_title='Количество заведений',
                   yaxis_title='Название категорий'
                 )
fig.show() # выводим график


# **Вывод:** 
# 
# По графику видно, что большинство заведений являются несетевыми, но есть пара исключений:
# 
# - кофейня - сетевых заведений немного больше. 713/688
# - пиццерия - сетевых заведений немного больше. 328/301
# - булочная - сетевых заведений заметно больше. 156/99

# ### Топ-15 популярных сетей в Москве

# Сгруппируем данные по названиям заведений и найдем топ-15 популярных сетей в Москве.

# In[27]:


df_chain = df[df['chain'] == 1]
top_15 = df_chain.groupby('name').agg({'rating' : 'median', 'category' : pd.Series.mode, 'district' : 'count'})
top_15 = top_15.rename(columns={'district':'count'})
top_15 = top_15.sort_values('count', ascending = False).reset_index().head(15)
top_15


# In[28]:


fig = px.bar(top_15, # загружаем данные и заново их сортируем
             x='count', # указываем столбец с данными для оси X
             y='name', # указываем столбец с данными для оси Y
             text='count', # добавляем аргумент, который отобразит текст с информацией
             color='name'  # о количестве объявлений внутри столбца графика
            )
# оформляем график
fig.update_layout(title='ТОП-15 популярных сетей в Москве',
                   xaxis_title='Количество заведений',
                   yaxis_title='Название заведений',
                   showlegend=False)
fig.show() # выводим график


# Из графика видно, что самая популярная сеть - Шоколадница. Далее идут пиццерии. Сеть Му-Му замыкает топ.

# In[29]:


print('Всего заведений в Топ-15:', top_15['count'].sum())


# In[30]:


fig = px.bar(top_15,
             x='count', 
             y='category',
             color='category',
             text = 'name'
            )

fig.update_layout(title='Количество заведений по категориям из топ-15 популярных сетей Москвы',
                   xaxis_title='Количество заведений',
                   yaxis_title='Название категорий',
                   yaxis={'categoryorder':'total ascending'},
                   width=900,
                   height=500
                 )
fig.show()


# In[31]:


district_chain = df_chain.groupby(['district', 'category', 'name']).agg({'rating' : 'median', 'address' : 'count'})
district_chain = district_chain.sort_values('address', ascending = False).reset_index()
district_chain = district_chain.rename(columns={'address':'count'})
district_chain = district_chain[district_chain['name'].isin(top_15['name'])]
district_chain.head()


# In[32]:


fig = px.bar(district_chain, 
             x='count', 
             y='district',                  
             color='category'
            )

fig.update_layout(title='Количество заведений каждой категории по районам',
                   xaxis_title='Количество заведений',
                   yaxis_title='Название района',
                   yaxis={'categoryorder':'total ascending'},
                   width=1000,
                   height=700
                 )
fig.show()


# **Вывод:**
# 
# Всего заведений в топ-15 - 811. По графику наглядно видно, что большая часть приходится на кофейни. У ресторанов, пиццерий и кафе примерно равное количество. Меньше всего у булочных.
# 
# Из топ-15 больше всего заведений находятся в Центральном административном округе. В основном это кафе, кофейни и рестораны. Примерно одинаковые показатели у Южного, Северного, Северо-Восточного и Западного административных округов. Меньше всего заведений из топ-15 в Северо-Западном административном округе.

# ### Административные районы Москвы

# Посмотрим какие административные районы Москвы присутствуют в датасете. Отобразим общее количество заведений и количество заведений каждой категории по районам.

# In[33]:


district_chain_df = df.groupby(['district', 'category']).agg({'rating' : 'median', 'name' : 'count'})
district_chain_df = district_chain_df.sort_values('rating', ascending = False).reset_index()
district_chain_df = district_chain_df.rename(columns={'name':'count'})
district_chain_df.head()


# In[34]:


fig = px.bar(district_chain_df,
             x='count',
             y='district',
             color='category'
            )
fig.update_layout(title = 'Количество заведений каждой категории по районам Москвы',
                  xaxis_title = 'Количество заведений',
                  yaxis_title = 'Название района',
                  yaxis={'categoryorder': 'total ascending'}
)
fig.show()


# In[35]:


print(f'Административные районы Москвы в датасете:', district_chain['district'].unique())


# **Вывод:**
# 
# Количество районов - 9. По графику видно, что больше всего заведений располагается в Центральном административном округе. В нем преобладают кафе, кофейни и рестораны. Кафе распределены равномерно по всем округам. Столовых меньше всего по всем округам.

# ### Средние рейтинги по категориям

# In[36]:


category_rating = df.groupby('category').agg({'rating': 'mean'}).round(2).sort_values('rating', ascending=False).reset_index()
category_rating


# In[37]:


fig = px.bar(category_rating,
             x='rating',
             y='category',
             text='rating',
             color='category'
            )
fig.update_layout(title='Распределение средних рейтингов по категориям заведений',
                  xaxis_title='Рейтинг',
                  yaxis_title='Название категорий')
fig.update_xaxes(range=[4, 4.5])
fig.show()


# **Вывод:**
# 
# Из графика видно, что у категорий бар/паб наивысший рейтинг 4.39. У пиццерий, ресторанов, кофеин и булочных примерно одинаковый рейтинг. Самый маленький рейтинг у ресторанов быстрого питания. Также видно, что по все заведениям рейтинг выше 4, что достаточно хорошо.

# ### Фоновая картограмма (хороплет) со средним рейтингом заведений каждого района

# Построим фоновую картограмму (хороплет) со средним рейтингом заведений каждого района. Границы районов Москвы, которые встречаются в датасете, хранятся в файле admin_level_geomap.geojson

# In[38]:


rating_df = df.groupby('district', as_index=False)['rating'].agg('mean').round(2)
rating_df


# In[39]:


# загружаем JSON-файл с границами округов Москвы
state_geo = 'https://code.s3.yandex.net/data-analyst/admin_level_geomap.geojson'
# moscow_lat - широта центра Москвы, moscow_lng - долгота центра Москвы
moscow_lat, moscow_lng = 55.751244, 37.618423

# Создаем карту Мск
m = Map(location=[moscow_lat, moscow_lng], zoom_start=10)

# создаём хороплет с помощью конструктора Choropleth и добавляем его на карту
Choropleth(
    geo_data=state_geo,
    data=rating_df,
    columns=['district', 'rating'],
    key_on='feature.name',
    legend_name='Средний рейтинг заведений по районам',
).add_to(m)

# вывод карты
m


# **Вывод:**
# 
# По данным видно, что самый высокий рейтинг в заведениях в Центральном административном округе - 4.38. Самый низкий - в Юго-Восточном администратвном округе - 4.1.

# ### Заведения датасета на карте

# Отобразим все заведения датасета на карте с помощью кластеров средствами библиотеки folium.

# In[40]:


# moscow_lat - широта центра Москвы, moscow_lng - долгота центра Москвы
moscow_lat, moscow_lng = 55.751244, 37.618423

# создаём карту Москвы
m = Map(location=[moscow_lat, moscow_lng], zoom_start=10)
# создаём пустой кластер, добавляем его на карту
marker_cluster = MarkerCluster().add_to(m)

# функция, принимающая строку датафрейма, создает маркер в текущей точке и
# добавляет его в кластер marker_cluster

def create_cluster(row):
    Marker(
        [row['lat'], row['lng']],
        popup=f"{row['name']} {row['rating']}",
    ).add_to(marker_cluster)
    
# к каждой строке датафрейма применяем функцию
df.apply(create_cluster, axis=1)

# выводим карту
m


# **Вывод:**
# 
# По карте отчетливо видно, что основная масса заведений сконцентрирована в центре Москвы. Уже меньше на севере и еще меньше на юге.

# ### Топ-15 улиц по количеству заведений

# In[41]:


streets_moscow = df[df['street'].notnull()]
top15_streets = streets_moscow['street'].value_counts().reset_index().head(15)
top15_streets.columns = ['street_name', 'count']
top15_streets


# Создадим таблицу с названиями улиц и категорий

# In[42]:


streets_category = df.groupby(['street', 'category'])['name'].count().reset_index()
streets_category.columns = ['street_name', 'category', 'count']
streets_category.sort_values('count', ascending=False)


# Оставим только улицы из топ 15

# In[43]:


streets_top15_category = streets_category[streets_category['street_name'].isin(top15_streets['street_name'])]
streets_top15_category


# In[44]:


fig = px.bar(streets_top15_category, 
             x='count', 
             y='street_name',                    
             color='category'
            )

fig.update_layout(title='Количество заведений каждой категории по районам',
                   xaxis_title='Количество заведений',
                   yaxis_title='Название улиц',
                   yaxis={'categoryorder':'total ascending'}
                 )
fig.show()


# **Вывод:**
# 
# Из графика можно заметить, что больше всего заведений на проспекте Мира. Преобладают кафе и рестораны. Далее идет Профсоюзная улица. По заведениям ситуация схожая.

# ### Улицы, на которых находится только один объект общепита.

# In[45]:


streets_with_one_cafe = df['street'].value_counts().reset_index()
streets_with_one_cafe.columns = ['street_name', 'cafe_count']
streets_with_one_cafe = streets_with_one_cafe[streets_with_one_cafe['cafe_count'] == 1]
streets_with_one_cafe


# Посмотрим к каким категориям относятся заведения

# In[46]:


streets_category_new = streets_category[streets_category['street_name'].isin(streets_with_one_cafe['street_name'])]
streets_category_new = streets_category_new.groupby('category')['street_name'].count()
streets_category_new


# **Вывод:**
# 
# Видно, что 458 улиц имеют только одно заведение. Больше всего - это кафе.

# ### Значения средних чеков заведений

# Значения средних чеков заведений хранятся в столбце middle_avg_bill. Эти числа показывают примерную стоимость заказа в рублях, которая чаще всего выражена диапазоном. Посчитаем медиану этого столбца для каждого района. Используем это значение в качестве ценового индикатора района. Построим фоновую картограмму (хороплет) с полученными значениями для каждого района.

# In[47]:


median_bill = df.groupby('district')['middle_avg_bill'].median().reset_index()
median_bill


# In[48]:


# создаем карту Москвы

mm = Map(location=[moscow_lat, moscow_lng], zoom_start=10)

# хороплет
Choropleth(
    geo_data=state_geo,
    data = median_bill,
    columns = ['district', 'middle_avg_bill'],
    key_on = 'feature.name',
    legend_name = 'Средний чек заведений по районам',
).add_to(mm)

mm


# **Вывод**
# 
# По данным выше мы видим, что самый высокий средний чек в Центральном и Западном округах. Самый маленький в Юго-Восточном административном округе. Из таблицы выше видно, что средний чек округов вокруг центрального в среднем отличается в 1,5 - 2 раза.

# **Общий вывод:**
# 
# - Был проведен анализ заведений общественного питания Москвы. По количеству заведений лидируют кафе с численностью 2366, немного меньше ресторан - 2031. На последнем месте булочная - 255.
# - Также проанализировали, что больше всего посадочных мест предоставляют в ресторанах, что логично, так как большинство празников люди отмечают в ресторанах. Далее идут заведения быстрого питания, т.к. они больше всего распространены в Москве.
# 
# - Кафе и столовые располагают для своих гостей меньшим количеством посадочных мест.
# 
# - В Москве 61.9% мест являются несетевыми. Но есть пара исключений:
# 
#   - кофейня - сетевых заведений немного больше. 713/688
#   - пиццерия - сетевых заведений немного больше. 328/301
#   - булочная - сетевых заведений заметно больше. 156/99
# 
# - Самая популярная сеть в Москве - Шоколадница. На втором и третьем месте расположились известные пиццерии.
# 
# - Всего заведений в топ-15 - 811. По графику наглядно видно, что большая часть приходится на кофейни. У ресторанов, пиццерий и кафе примерно равное количество.
# 
# - Из топ-15 больше всего заведений находятся в Центральном административном округе. В основном это кафе, кофейни и рестораны. Примерно одинаковые показатели у Южного, Северного, Северо-Восточного и Западного административных округов. Здесь приоритеты меняются в сторону категории быстрого питания. Меньше всего заведений из топ-15 в Северо-Западном административном округе.
# 
# - Количество районов - 9. Больше всего заведений располагается в Центральном административном округе. В нем преобладают кафе, кофейни и рестораны. Кафе распределены равномерно по всем округам. Столовых меньше всего по всем округам.
# 
# - У категорий бар/паб наивысший рейтинг 4.39. У пиццерий, ресторанов, кофеин и булочных примерно одинаковый рейтинг. Самый маленький рейтинг у ресторанов быстрого питания. По все заведениям рейтинг выше 4, что достаточно хорошо.
# 
# - Самый высокий рейтинг в заведениях в Центральном административном округе - 4.38. Самый низкий - в Юго-Восточном административном округе - 4.1.
# 
# - Основная масса заведений располагаются в центре Москвы.
# 
# - Больше всего заведений на проспекте Мира. Преобладают кафе и рестораны. Далее идет Профсоюзная улица. По заведениям ситуация схожая.
# 
# - 458 улиц имеют только одно заведение. Больше всего - это кафе.
# 
# - Самый высокий средний чек в Центральном и Западном округах. Самый маленький в Юго-Восточном административном округе. Из таблицы выше видно, что средний чек округов вокруг центрального в среднем отличается в 1,5 - 2 раза.

# ## Детализация исследования: открытие кофейни

# **Сколько всего кофеен в датасете? В каких районах их больше всего, каковы особенности их расположения?**

# In[49]:


coffee_data = df[df['category'] == 'кофейня']
print('Количество кофеин:', len(coffee_data))


# In[50]:


# создаем карту
m2 = Map(location=[moscow_lat, moscow_lng], zoom_start=10)
# создаем пустой кластер и добавляем его на карту
marker_cluster = MarkerCluster().add_to(m2)

# функция, которая принимает строку датафрейма,
# создаёт маркер в текущей точке и добавляет его в кластер marker_cluster

def create_clusters(row):
    Marker(
        [row['lat'], row['lng']],
        popup=f"{row['name']} {row['rating']}",
    ).add_to(marker_cluster)

# применяем функцию create_clusters() к каждой строке датафрейма
coffee_data.apply(create_clusters, axis=1)

# выводим карту
m2


# **Вывод:** 
# 
# Всего 1401 заведение в категории кофейня. Большая часть заведений располагается в Центральном районе. Меньше всего заведений - в восточной и южной частях города.

# **Есть ли круглосуточные кофейни?**

# In[51]:


coffee_24_7 = coffee_data[coffee_data['is_24/7'] == True]
print('Количество круглосуточных кофеен:', len(coffee_24_7))


# In[52]:


# создаём карту Москвы
m3 = Map(location=[moscow_lat, moscow_lng], zoom_start=10)
# создаём пустой кластер, добавляем его на карту
marker_cluster = MarkerCluster().add_to(m3)

# пишем функцию, которая принимает строку датафрейма,
# создаёт маркер в текущей точке и добавляет его в кластер marker_cluster
def create_clusters(row):
    Marker(
        [row['lat'], row['lng']],
        popup=f"{row['name']} {row['rating']}",
    ).add_to(marker_cluster)

# применяем функцию create_clusters() к каждой строке датафрейма
coffee_24_7.apply(create_clusters, axis=1)

# выводим карту
m3


# **Вывод:**
# 
# Количество круглосуточных кофеен - 59. По карте видно, что большинство находится в центре города. Это логично, т.к. ночью люди любят гулять по центру и спрос на кофе присутствует. В других районах это не распространено.

# **Какие у кофеен рейтинги? Как они распределяются по районам?**

# In[53]:


coffee_rating = coffee_data.groupby('district', as_index=False)['rating'].agg('mean').round(2).sort_values('rating', ascending=False)
coffee_rating


# In[54]:


# создаём карту
m4 = Map(location=[moscow_lat, moscow_lng], zoom_start=10)

# создаём хороплет с помощью конструктора Choropleth и добавляем его на карту
Choropleth(
    geo_data=state_geo,
    data=coffee_rating,
    columns=['district', 'rating'],
    key_on='feature.name',
    legend_name='Средний рейтинг заведений по районам',
).add_to(m4)

# выводим карту
m4


# **Вывод:**
# 
# Самый высокий рейтинг в округах: Центральный административный округ и Северо-Западный административный округ. Самый низкий рейтинг у Западного административного округа.

# **На какую стоимость чашки капучино стоит ориентироваться при открытии и почему?**
# 

# In[55]:


cup_of_coffee = coffee_data.groupby('district', as_index=False)['middle_coffee_cup'].agg('mean').round(2).sort_values('middle_coffee_cup', ascending=False)
display(cup_of_coffee)
coffee_price = round(cup_of_coffee['middle_coffee_cup'].mean(), 2)
print(f'Средняя стоимость чашки кофе в Москве:', coffee_price)


# In[56]:


m5 = Map(location=[moscow_lat, moscow_lng], zoom_start=10)

# создаём хороплет с помощью конструктора Choropleth и добавляем его на карту
Choropleth(
    geo_data=state_geo,
    data=cup_of_coffee,
    columns=['district', 'middle_coffee_cup'],
    key_on='feature.name',
    legend_name='Средняя цена чашки кофе по районам',
).add_to(m5)

# выводим карту
m5


# **Вывод:**
# 
# Самый дорогой кофе в Западном(188.56) и Центральном округах(187.52). Средняя стоимость чашки кофе для Москвы - 171.23.

# **Рекомендации:**  
# 
# При открытии новой кофейни лучше выбрать Центральный, Западный или Юго-Западный округа, так как в этих районах высокая стоимость чашки кофе. Это позволит при запуске заведения снизить стоимость чашки кофе для старта, без серьезных потерь.
# Стоит рассмотреть круглосуточный режим работы. На Западном и Юго-Западном округах явный недостаток круглосуточных точек. В Центральном округе также лучше рассмотреть формат 24/7, так как это самый оживленный район с большим количеством пешеходных улиц и оживлен в ночное время.
# Также у заведений западного направления мы отметили низкий рейтинг заведений. Это можно использовать как преимущество при старте.

# **Презентация:** https://drive.google.com/file/d/1_hedzS7L8C1Ma7_uG9Vf-vyFmbGSp798/view?usp=share_link
